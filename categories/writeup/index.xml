<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>writeup on incogbyte</title>
    <link>https://incogbyte.github.io/categories/writeup/</link>
    <description>Recent content in writeup on incogbyte</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jun 2022 10:12:34 -0300</lastBuildDate><atom:link href="https://incogbyte.github.io/categories/writeup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reversing Nim Binary With Radare</title>
      <link>https://incogbyte.github.io/posts/reverse-nim-binary-with-radare/</link>
      <pubDate>Thu, 09 Jun 2022 10:12:34 -0300</pubDate>
      
      <guid>https://incogbyte.github.io/posts/reverse-nim-binary-with-radare/</guid>
      <description>This write up explains how i solved the challenge proposed by CakeCTF2022. The challenge was to get the flag in a binary made with the Nim (https://nim-lang.org/) program language.
tl;dr
If you want to know the answer right away, just put a break point in the sym.join_main_42 function, and check the registers and your flag will be there.
The challenge itself was not complex however, I had never written anything in Nim.</description>
    </item>
    
    <item>
      <title>iOS Anti-Tampers Bypass</title>
      <link>https://incogbyte.github.io/posts/ios-anti-tampers-bypass/</link>
      <pubDate>Sat, 19 Mar 2022 17:12:34 -0300</pubDate>
      
      <guid>https://incogbyte.github.io/posts/ios-anti-tampers-bypass/</guid>
      <description>Hi everyone, in this blog i&amp;rsquo;m going to explain a little bit of my journey to solve a iOS challenge proposed by @as0ler. The Challenge can be found at the following link:
https://github.com/hexploitable/r2con2020_r2frida/blob/master/ios-challenge-2.ipa The challenge is to remove all anti-tamper methods, that means you will have to remove some methods such as:
ptrace sysctl strstr geppid In this blog, I will only talk about how I did it to bypass, using only frida with radare2.</description>
    </item>
    
    <item>
      <title>SQL Injection CVE-2022-23046 - PHPIPAM</title>
      <link>https://incogbyte.github.io/posts/cve-2022-23046/</link>
      <pubDate>Thu, 20 Jan 2022 17:12:34 -0300</pubDate>
      
      <guid>https://incogbyte.github.io/posts/cve-2022-23046/</guid>
      <description>TL;DR
This write up is about a SQL injection which I found 4 days after another researcher reported it :/, however, because of the fact that I haven’t found any write ups or publicly available exploits, I decided to write about it. Exploit at the end!
PHPIPAM is a software widely used internally by several companies. And by being so, it is relatively common for you to find a running instance to manage IT /assets, networks, etc.</description>
    </item>
    
    <item>
      <title>Bypass NAC ( Network Access Control )</title>
      <link>https://incogbyte.github.io/posts/bypass-nac/</link>
      <pubDate>Sun, 02 Feb 2020 17:12:34 -0300</pubDate>
      
      <guid>https://incogbyte.github.io/posts/bypass-nac/</guid>
      <description>In this post i’ll describe how to bypass NAC ( Network Access Control ). During an internal pentest, I had a problem connecting to the client network ( all network devices 802.1x (including VoIP devices), after a few hours trying to find out why, I found out that the client had implemented NAC, but what is Network access protocol (NAC) ?
Network Access Control (NAC) is a solution used on corporate networks to prevent, or even hinder, unauthorized hosts from accessing internally available services and systems.</description>
    </item>
    
  </channel>
</rss>
